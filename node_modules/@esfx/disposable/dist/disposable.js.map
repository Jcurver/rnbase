{"version":3,"file":"disposable.js","sourceRoot":"","sources":["../src/disposable.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\r\n   Copyright 2019 Ron Buckton\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n\r\nimport { weakDisposableResourceStack, weakDisposableState } from \"./internal/disposable\";\r\nimport { AddDisposableResource, createDeprecation, CreateScope, DisposableResourceRecord, DisposeResources, disposeSym, ThrowCompletion } from \"./internal/utils\";\r\n\r\n/* @internal */\r\nexport const reportDisposableCreateDeprecation = createDeprecation(\"Use 'new Disposable(dispose)' instead.\");\r\n/* @internal */\r\nexport const reportDisposableUseDeprecation = createDeprecation(\"Use 'Disposable.scope()' instead.\");\r\n/* @internal */\r\nexport const reportDisposableFromDeprecation = createDeprecation(\"'Disposable.from()' is unsafe. Use 'new DisposableStack' and 'DisposableStack.prototype.use' instead.\");\r\n\r\n/**\r\n * Indicates an object that has resources that can be explicitly disposed.\r\n */\r\nexport interface Disposable {\r\n    /**\r\n     * Dispose this object's resources.\r\n     */\r\n    [Disposable.dispose](): void;\r\n}\r\n\r\nexport type DisposableLike =\r\n    | Disposable\r\n    | (() => void)\r\n    ;\r\n\r\n/**\r\n * Indicates an object that has resources that can be explicitly disposed.\r\n *\r\n * NOTE: It is not necessary to subclass `Disposable`. Merely having a `[Disposable.dispose]()` method is sufficient.\r\n */\r\nexport class Disposable {\r\n    /**\r\n     * A well-known symbol used to define an explicit resource disposal method on an object.\r\n     *\r\n     * Uses `Symbol.dispose` if present.\r\n     */\r\n    static readonly dispose: unique symbol = disposeSym;\r\n\r\n    /**\r\n     * Creates a `Disposable` wrapper around a callback used to dispose of a resource.\r\n     */\r\n    constructor(onDispose: () => void) {\r\n        if (typeof onDispose !== \"function\") throw new TypeError(\"Function expected: dispose\");\r\n        weakDisposableState.set(this, \"pending-one\");\r\n        weakDisposableResourceStack.set(this, [{ hint: \"sync\", resource: null, dispose: onDispose }]);\r\n    }\r\n\r\n    /* @internal */\r\n    [disposeSym]() {\r\n        const disposableState = weakDisposableState.get(this);\r\n        if (disposableState === \"disposed\") return;\r\n        if (disposableState !== \"pending\" && disposableState !== \"pending-one\") throw new TypeError(\"Wrong target\");\r\n        weakDisposableState.set(this, \"disposed\");\r\n\r\n        DisposeResources(\"sync\", weakDisposableResourceStack.get(this), disposableState === \"pending-one\", /*completion*/ undefined);\r\n    }\r\n\r\n    /**\r\n     * Creates a `Disposable` wrapper around a set of other disposables.\r\n     * @param disposables An `Iterable` of `Disposable` objects.\r\n     * @deprecated Use `new DisposableStack` and `DisposableStack.prototype.use()` instead. Creating a disposable object from an array is\r\n     * considered unsafe, as an exception raised when allocating a later disposable could result in an earlier disposable not being disposed:\r\n     * ```js\r\n     * Disposable.from([getResourceX(), getResourceY()])\r\n     * //               ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^\r\n     * //               |               |\r\n     * //               allocated, but  throws\r\n     * //               not disposed\r\n     * ```\r\n     */\r\n    static from(disposables: Iterable<DisposableLike | null | undefined>) {\r\n        reportDisposableFromDeprecation();\r\n        const disposableResourceStack: DisposableResourceRecord<\"sync\">[] = [];\r\n        const errors: unknown[] = [];\r\n\r\n        let throwCompletion: ThrowCompletion | undefined;\r\n        try {\r\n            for (const resource of disposables) {\r\n                try {\r\n                    AddDisposableResource(disposableResourceStack, resource, \"sync\");\r\n                }\r\n                catch (e) {\r\n                    errors.push(e);\r\n                }\r\n            }\r\n        }\r\n        catch (e) {\r\n            throwCompletion = { cause: e };\r\n        }\r\n        finally {\r\n            if (errors.length || throwCompletion) {\r\n                DisposeResources(\"sync\", disposableResourceStack, /*suppress*/ false, throwCompletion, errors);\r\n            }\r\n        }\r\n\r\n        const disposable: Disposable = Object.create(__Disposable_prototype__);\r\n        weakDisposableState.set(disposable, \"pending\");\r\n        weakDisposableResourceStack.set(disposable, disposableResourceStack);\r\n        return disposable;\r\n    }\r\n\r\n    /**\r\n     * Emulate `using const` using `for..of`.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * // with `using const` (proposed)\r\n     * {\r\n     *   ...\r\n     *   using const x = expr, y = expr;\r\n     *   ...\r\n     * }\r\n     *\r\n     * // with `Disposable.scope()`:\r\n     * for (const { using, fail } of Disposable.scope()) {\r\n     *   try {\r\n     *     ...\r\n     *     const x = using(expr), y = using(expr);\r\n     *     ...\r\n     *   }\r\n     *   catch (e) {\r\n     *     fail(e);\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    static * scope(): Generator<DisposableScope, void, undefined> {\r\n        const context = CreateScope(\"sync\");\r\n        try {\r\n            context.state = \"initialized\";\r\n            yield context.scope;\r\n            context.state = \"exiting\";\r\n        }\r\n        finally {\r\n            context.state = \"done\";\r\n            DisposeResources(\"sync\", context.disposables, /*suppress*/ false, context.throwCompletion);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Yields each disposable in the iterable, disposing it when the generator resumes.\r\n     *\r\n     * This emulates `for (using const x of expr)`.\r\n     *\r\n     * @example\r\n     * ```ts\r\n     * // with `using const` (proposed)\r\n     * for (using const x of expr) {\r\n     *   ...\r\n     * }\r\n     *\r\n     * // with `Disposable.usingEach()`:\r\n     * for (const x of Disposable.usingEach(expr)) {\r\n     *   ...\r\n     * }\r\n     * ```\r\n     */\r\n    static * usingEach(disposables: Iterable<Disposable | (() => void) | null | undefined>) {\r\n        // for (using const disposable of disposables) yield disposable;\r\n        for (const disposable of disposables) {\r\n            for (const { using, fail } of Disposable.scope()) try {\r\n                yield using(disposable);\r\n            } catch (e) { fail(e); }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes a callback with the provided `Disposable` resource, disposing the resource when the callback completes.\r\n     * @deprecated Use `Disposable.scope()` instead.\r\n     */\r\n    static use<T extends Disposable | (() => void) | null | undefined, U>(resource: T, callback: (resource: T) => U) {\r\n        reportDisposableUseDeprecation();\r\n        // using const x = resource;\r\n        // return callback(x);\r\n        for (const { using, fail } of Disposable.scope()) {\r\n            try {\r\n                return callback(using(resource));\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines whether a value is Disposable.\r\n     */\r\n    static hasInstance(value: unknown): value is Disposable {\r\n        return typeof value === \"object\"\r\n            && value != null\r\n            && disposeSym in value;\r\n    }\r\n\r\n    /**\r\n     * Determines whether a value is `Disposable`.\r\n     */\r\n    static [Symbol.hasInstance](value: unknown): value is Disposable {\r\n        return Disposable.hasInstance(value);\r\n    }\r\n}\r\n\r\n/* @internal */\r\nexport const __Disposable_prototype__ = Disposable.prototype;\r\n\r\nObject.defineProperty(__Disposable_prototype__, Symbol.toStringTag, { configurable: true, value: \"Disposable\" });\r\nObject.defineProperty(Disposable, Symbol.hasInstance, Object.getOwnPropertyDescriptor(Disposable, \"hasInstance\")!);\r\n\r\nexport namespace Disposable {\r\n    /**\r\n     * Creates a `Disposable` wrapper around a callback used to dispose of a resource.\r\n     * @deprecated Use `new Disposable(dispose)` instead.\r\n     */\r\n    export function create(dispose: () => void): Disposable {\r\n        reportDisposableCreateDeprecation();\r\n        return new Disposable(dispose);\r\n    }\r\n}\r\n\r\n/**\r\n * Used to aproximate `using const` via `for..of`. See {@link Disposable.scope}.\r\n */\r\nexport interface DisposableScope {\r\n    /**\r\n     * Tracks a resource to be disposed at the end of a `for..of` statement. See {@link Disposable.scope}.\r\n     */\r\n    using<T extends Disposable | (() => void) | null | undefined>(value: T): T;\r\n\r\n    /**\r\n     * Tracks an exception from the body of a `for..of` statement. See {@link Disposable.scope}.\r\n     */\r\n    fail(error: unknown): void;\r\n}\r\n"]}