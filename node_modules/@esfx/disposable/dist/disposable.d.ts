/*!
   Copyright 2019 Ron Buckton

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
/**
 * Indicates an object that has resources that can be explicitly disposed.
 */
export interface Disposable {
    /**
     * Dispose this object's resources.
     */
    [Disposable.dispose](): void;
}
export declare type DisposableLike = Disposable | (() => void);
/**
 * Indicates an object that has resources that can be explicitly disposed.
 *
 * NOTE: It is not necessary to subclass `Disposable`. Merely having a `[Disposable.dispose]()` method is sufficient.
 */
export declare class Disposable {
    /**
     * A well-known symbol used to define an explicit resource disposal method on an object.
     *
     * Uses `Symbol.dispose` if present.
     */
    static readonly dispose: unique symbol;
    /**
     * Creates a `Disposable` wrapper around a callback used to dispose of a resource.
     */
    constructor(onDispose: () => void);
    /**
     * Creates a `Disposable` wrapper around a set of other disposables.
     * @param disposables An `Iterable` of `Disposable` objects.
     * @deprecated Use `new DisposableStack` and `DisposableStack.prototype.use()` instead. Creating a disposable object from an array is
     * considered unsafe, as an exception raised when allocating a later disposable could result in an earlier disposable not being disposed:
     * ```js
     * Disposable.from([getResourceX(), getResourceY()])
     * //               ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^
     * //               |               |
     * //               allocated, but  throws
     * //               not disposed
     * ```
     */
    static from(disposables: Iterable<DisposableLike | null | undefined>): Disposable;
    /**
     * Emulate `using const` using `for..of`.
     *
     * @example
     * ```ts
     * // with `using const` (proposed)
     * {
     *   ...
     *   using const x = expr, y = expr;
     *   ...
     * }
     *
     * // with `Disposable.scope()`:
     * for (const { using, fail } of Disposable.scope()) {
     *   try {
     *     ...
     *     const x = using(expr), y = using(expr);
     *     ...
     *   }
     *   catch (e) {
     *     fail(e);
     *   }
     * }
     * ```
     */
    static scope(): Generator<DisposableScope, void, undefined>;
    /**
     * Yields each disposable in the iterable, disposing it when the generator resumes.
     *
     * This emulates `for (using const x of expr)`.
     *
     * @example
     * ```ts
     * // with `using const` (proposed)
     * for (using const x of expr) {
     *   ...
     * }
     *
     * // with `Disposable.usingEach()`:
     * for (const x of Disposable.usingEach(expr)) {
     *   ...
     * }
     * ```
     */
    static usingEach(disposables: Iterable<Disposable | (() => void) | null | undefined>): Generator<Disposable | (() => void) | null | undefined, void, unknown>;
    /**
     * Executes a callback with the provided `Disposable` resource, disposing the resource when the callback completes.
     * @deprecated Use `Disposable.scope()` instead.
     */
    static use<T extends Disposable | (() => void) | null | undefined, U>(resource: T, callback: (resource: T) => U): U | undefined;
    /**
     * Determines whether a value is Disposable.
     */
    static hasInstance(value: unknown): value is Disposable;
    /**
     * Determines whether a value is `Disposable`.
     */
    static [Symbol.hasInstance](value: unknown): value is Disposable;
}
export declare namespace Disposable {
    /**
     * Creates a `Disposable` wrapper around a callback used to dispose of a resource.
     * @deprecated Use `new Disposable(dispose)` instead.
     */
    function create(dispose: () => void): Disposable;
}
/**
 * Used to aproximate `using const` via `for..of`. See {@link Disposable.scope}.
 */
export interface DisposableScope {
    /**
     * Tracks a resource to be disposed at the end of a `for..of` statement. See {@link Disposable.scope}.
     */
    using<T extends Disposable | (() => void) | null | undefined>(value: T): T;
    /**
     * Tracks an exception from the body of a `for..of` statement. See {@link Disposable.scope}.
     */
    fail(error: unknown): void;
}
//# sourceMappingURL=disposable.d.ts.map