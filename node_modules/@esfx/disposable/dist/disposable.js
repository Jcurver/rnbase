"use strict";
/*!
   Copyright 2019 Ron Buckton

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.__Disposable_prototype__ = exports.Disposable = exports.reportDisposableFromDeprecation = exports.reportDisposableUseDeprecation = exports.reportDisposableCreateDeprecation = void 0;
const disposable_1 = require("./internal/disposable");
const utils_1 = require("./internal/utils");
/* @internal */
exports.reportDisposableCreateDeprecation = (0, utils_1.createDeprecation)("Use 'new Disposable(dispose)' instead.");
/* @internal */
exports.reportDisposableUseDeprecation = (0, utils_1.createDeprecation)("Use 'Disposable.scope()' instead.");
/* @internal */
exports.reportDisposableFromDeprecation = (0, utils_1.createDeprecation)("'Disposable.from()' is unsafe. Use 'new DisposableStack' and 'DisposableStack.prototype.use' instead.");
/**
 * Indicates an object that has resources that can be explicitly disposed.
 *
 * NOTE: It is not necessary to subclass `Disposable`. Merely having a `[Disposable.dispose]()` method is sufficient.
 */
class Disposable {
    /**
     * Creates a `Disposable` wrapper around a callback used to dispose of a resource.
     */
    constructor(onDispose) {
        if (typeof onDispose !== "function")
            throw new TypeError("Function expected: dispose");
        disposable_1.weakDisposableState.set(this, "pending-one");
        disposable_1.weakDisposableResourceStack.set(this, [{ hint: "sync", resource: null, dispose: onDispose }]);
    }
    /* @internal */
    [utils_1.disposeSym]() {
        const disposableState = disposable_1.weakDisposableState.get(this);
        if (disposableState === "disposed")
            return;
        if (disposableState !== "pending" && disposableState !== "pending-one")
            throw new TypeError("Wrong target");
        disposable_1.weakDisposableState.set(this, "disposed");
        (0, utils_1.DisposeResources)("sync", disposable_1.weakDisposableResourceStack.get(this), disposableState === "pending-one", /*completion*/ undefined);
    }
    /**
     * Creates a `Disposable` wrapper around a set of other disposables.
     * @param disposables An `Iterable` of `Disposable` objects.
     * @deprecated Use `new DisposableStack` and `DisposableStack.prototype.use()` instead. Creating a disposable object from an array is
     * considered unsafe, as an exception raised when allocating a later disposable could result in an earlier disposable not being disposed:
     * ```js
     * Disposable.from([getResourceX(), getResourceY()])
     * //               ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^
     * //               |               |
     * //               allocated, but  throws
     * //               not disposed
     * ```
     */
    static from(disposables) {
        (0, exports.reportDisposableFromDeprecation)();
        const disposableResourceStack = [];
        const errors = [];
        let throwCompletion;
        try {
            for (const resource of disposables) {
                try {
                    (0, utils_1.AddDisposableResource)(disposableResourceStack, resource, "sync");
                }
                catch (e) {
                    errors.push(e);
                }
            }
        }
        catch (e) {
            throwCompletion = { cause: e };
        }
        finally {
            if (errors.length || throwCompletion) {
                (0, utils_1.DisposeResources)("sync", disposableResourceStack, /*suppress*/ false, throwCompletion, errors);
            }
        }
        const disposable = Object.create(exports.__Disposable_prototype__);
        disposable_1.weakDisposableState.set(disposable, "pending");
        disposable_1.weakDisposableResourceStack.set(disposable, disposableResourceStack);
        return disposable;
    }
    /**
     * Emulate `using const` using `for..of`.
     *
     * @example
     * ```ts
     * // with `using const` (proposed)
     * {
     *   ...
     *   using const x = expr, y = expr;
     *   ...
     * }
     *
     * // with `Disposable.scope()`:
     * for (const { using, fail } of Disposable.scope()) {
     *   try {
     *     ...
     *     const x = using(expr), y = using(expr);
     *     ...
     *   }
     *   catch (e) {
     *     fail(e);
     *   }
     * }
     * ```
     */
    static *scope() {
        const context = (0, utils_1.CreateScope)("sync");
        try {
            context.state = "initialized";
            yield context.scope;
            context.state = "exiting";
        }
        finally {
            context.state = "done";
            (0, utils_1.DisposeResources)("sync", context.disposables, /*suppress*/ false, context.throwCompletion);
        }
    }
    /**
     * Yields each disposable in the iterable, disposing it when the generator resumes.
     *
     * This emulates `for (using const x of expr)`.
     *
     * @example
     * ```ts
     * // with `using const` (proposed)
     * for (using const x of expr) {
     *   ...
     * }
     *
     * // with `Disposable.usingEach()`:
     * for (const x of Disposable.usingEach(expr)) {
     *   ...
     * }
     * ```
     */
    static *usingEach(disposables) {
        // for (using const disposable of disposables) yield disposable;
        for (const disposable of disposables) {
            for (const { using, fail } of Disposable.scope())
                try {
                    yield using(disposable);
                }
                catch (e) {
                    fail(e);
                }
        }
    }
    /**
     * Executes a callback with the provided `Disposable` resource, disposing the resource when the callback completes.
     * @deprecated Use `Disposable.scope()` instead.
     */
    static use(resource, callback) {
        (0, exports.reportDisposableUseDeprecation)();
        // using const x = resource;
        // return callback(x);
        for (const { using, fail } of Disposable.scope()) {
            try {
                return callback(using(resource));
            }
            catch (e) {
                fail(e);
            }
        }
    }
    /**
     * Determines whether a value is Disposable.
     */
    static hasInstance(value) {
        return typeof value === "object"
            && value != null
            && utils_1.disposeSym in value;
    }
    /**
     * Determines whether a value is `Disposable`.
     */
    static [Symbol.hasInstance](value) {
        return Disposable.hasInstance(value);
    }
}
exports.Disposable = Disposable;
/**
 * A well-known symbol used to define an explicit resource disposal method on an object.
 *
 * Uses `Symbol.dispose` if present.
 */
Disposable.dispose = utils_1.disposeSym;
/* @internal */
exports.__Disposable_prototype__ = Disposable.prototype;
Object.defineProperty(exports.__Disposable_prototype__, Symbol.toStringTag, { configurable: true, value: "Disposable" });
Object.defineProperty(Disposable, Symbol.hasInstance, Object.getOwnPropertyDescriptor(Disposable, "hasInstance"));
(function (Disposable) {
    /**
     * Creates a `Disposable` wrapper around a callback used to dispose of a resource.
     * @deprecated Use `new Disposable(dispose)` instead.
     */
    function create(dispose) {
        (0, exports.reportDisposableCreateDeprecation)();
        return new Disposable(dispose);
    }
    Disposable.create = create;
})(Disposable = exports.Disposable || (exports.Disposable = {}));
//# sourceMappingURL=disposable.js.map