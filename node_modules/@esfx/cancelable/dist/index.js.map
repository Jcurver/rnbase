{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\r\n   Copyright 2019 Ron Buckton\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n*/\r\n\r\nimport { Disposable } from \"@esfx/disposable\";\r\nimport { isFunction, isMissing, isObject } from \"@esfx/internal-guards\";\r\nimport { defineTag } from \"@esfx/internal-tag\";\r\nimport { deprecateProperty } from \"@esfx/internal-deprecate\";\r\n\r\nconst cancelSubscriptionPrototype: Disposable = defineTag(Object.setPrototypeOf({\r\n    [Disposable.dispose](this: CancelSubscription) {\r\n        this.unsubscribe();\r\n    },\r\n}, Disposable.prototype), \"CancelSubscription\");\r\n\r\nfunction createCancelSubscription(unsubscribe: () => void): CancelSubscription {\r\n    return Object.setPrototypeOf({\r\n        unsubscribe() {\r\n            unsubscribe();\r\n        },\r\n    }, cancelSubscriptionPrototype);\r\n}\r\n\r\n/**\r\n * An object that can be canceled from an external source.\r\n */\r\nexport interface Cancelable {\r\n    /**\r\n     * Gets the [[CancelSignal]] for this [[Cancelable]].\r\n     */\r\n    [Cancelable.cancelSignal](): CancelSignal;\r\n}\r\n\r\nexport namespace Cancelable {\r\n    // #region Cancelable\r\n    /**\r\n     * A well-known symbol used to define a method to retrieve the `CancelSignal` for an object.\r\n     */\r\n    export const cancelSignal = Symbol.for(\"@esfx/cancelable:Cancelable.cancelSignal\");\r\n    // #endregion Cancelable\r\n\r\n    const cancelSignalPrototype: Cancelable = defineTag({\r\n        [Cancelable.cancelSignal](this: CancelableCancelSignal) {\r\n            return this;\r\n        }\r\n    }, \"CancelSignal\");\r\n\r\n    const emptySubscription: CancelSubscription = createCancelSubscription(() => { });\r\n    Object.freeze(emptySubscription);\r\n\r\n    /**\r\n     * A `Cancelable` that is already signaled.\r\n     */\r\n    export const canceled: CancelableCancelSignal = Object.setPrototypeOf({\r\n        get signaled() {\r\n            return true;\r\n        },\r\n        subscribe(onSignaled: () => void) {\r\n            onSignaled();\r\n            return emptySubscription;\r\n        }\r\n    }, cancelSignalPrototype);\r\n\r\n    Object.freeze(canceled);\r\n\r\n    /**\r\n     * A `Cancelable` that can never be signaled.\r\n     */\r\n    export const none: CancelableCancelSignal = Object.setPrototypeOf({\r\n        get signaled() {\r\n            return false;\r\n        },\r\n        subscribe(_onSignaled: () => void) {\r\n            return emptySubscription;\r\n        },\r\n    }, cancelSignalPrototype);\r\n\r\n    Object.freeze(none);\r\n\r\n    /**\r\n     * Determines whether a value is a `Cancelable` object.\r\n     * @deprecated Use `Cancelable.hasInstance` instead.\r\n     */\r\n    export function isCancelable(value: unknown): value is Cancelable {\r\n        return Cancelable.hasInstance(value);\r\n    }\r\n\r\n    /**\r\n     * Determines whether `cancelable` is in the signaled state.\r\n     */\r\n    export function isSignaled(cancelable: Cancelable | undefined) {\r\n        if (!isMissing(cancelable) && !isCancelable(cancelable)) throw new TypeError(\"Cancelable expected: cancelable\");\r\n        if (cancelable === Cancelable.canceled) return true;\r\n        if (cancelable === Cancelable.none || isMissing(cancelable)) return false;\r\n        return cancelable[Cancelable.cancelSignal]().signaled;\r\n    }\r\n\r\n    /**\r\n     * Throws a `CancelError` exception if the provided `cancelable` is in the signaled state.\r\n     */\r\n    export function throwIfSignaled(cancelable: Cancelable | undefined) {\r\n        if (isSignaled(cancelable)) {\r\n            throw new CancelError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribes to be notified when a `cancelable` becomes signaled.\r\n     */\r\n    export function subscribe(cancelable: Cancelable | undefined, onSignaled: () => void) {\r\n        if (!isMissing(cancelable) && !isCancelable(cancelable)) throw new TypeError(\"Cancelable expected: cancelable\");\r\n        if (cancelable === Cancelable.canceled) return Cancelable.canceled.subscribe(onSignaled);\r\n        if (cancelable === Cancelable.none || isMissing(cancelable)) return Cancelable.none.subscribe(onSignaled);\r\n        return cancelable[Cancelable.cancelSignal]().subscribe(onSignaled);\r\n    }\r\n\r\n    export const name = \"Cancelable\";\r\n\r\n    /**\r\n     * Determines whether a value is a `Cancelable` object.\r\n     */\r\n    export function hasInstance(value: unknown): value is Cancelable {\r\n        return isObject(value)\r\n            && Cancelable.cancelSignal in value;\r\n    }\r\n}\r\n\r\n/**\r\n * An object that represents a cancellation signal.\r\n */\r\nexport interface CancelSignal {\r\n    /**\r\n     * Gets a value indicating whether cancellation was signaled.\r\n     */\r\n    readonly signaled: boolean;\r\n\r\n    /**\r\n     * Subscribes to notifications for when the object becomes signaled.\r\n     */\r\n    subscribe(onSignaled: () => void): CancelSubscription;\r\n}\r\n\r\n/**\r\n * An object used to unsubscribe from a cancellation signal\r\n */\r\nexport interface CancelSubscription extends Disposable {\r\n    /**\r\n     * Unsubscribes from a cancellation signal.\r\n     */\r\n    unsubscribe(): void;\r\n}\r\n\r\nexport namespace CancelSubscription {\r\n    /**\r\n     * Creates a `CancelSubscription` object for an `unsubscribe` callback.\r\n     * @param unsubscribe The callback to execute when the `unsubscribe()` method is called.\r\n     */\r\n    export function create(unsubscribe: () => void): CancelSubscription {\r\n        if (!isFunction(unsubscribe)) throw new TypeError(\"Function expected: unsubscribe\");\r\n        return createCancelSubscription(unsubscribe);\r\n    }\r\n}\r\n\r\nexport interface CancelableCancelSignal extends CancelSignal {\r\n    [Cancelable.cancelSignal](): CancelableCancelSignal;\r\n}\r\n\r\n/**\r\n * Represents an object that is a source for cancelation.\r\n */\r\nexport interface CancelableSource extends Cancelable {\r\n    /**\r\n     * Cancels the source, notifying the associated [[CancelSignal]].\r\n     */\r\n    [CancelableSource.cancel](): void;\r\n}\r\n\r\nexport namespace CancelableSource {\r\n    // #region Cancelable\r\n    export import cancelSignal = Cancelable.cancelSignal;\r\n    export import isCancelable = Cancelable.isCancelable;\r\n    // #endregion Cancelable\r\n    \r\n    // #region CancelableSource\r\n    export const cancel = Symbol.for(\"@esfx/cancelable:CancelableSource.cancel\");\r\n    // #endregion CancelableSource\r\n\r\n    /**\r\n     * Determines whether a value is a `CancelableSource` object.\r\n     * @deprecated Use `CancelableSource.hasInstance` instead.\r\n     */\r\n    export function isCancelableSource(value: unknown): value is CancelableSource {\r\n        return CancelableSource.hasInstance(value);\r\n    }\r\n\r\n    export const name = \"CancelableSource\";\r\n\r\n    /**\r\n     * Determines whether a value is a `CancelableSource` object.\r\n     */\r\n    export function hasInstance(value: unknown): value is CancelableSource {\r\n        return isCancelable(value)\r\n            && CancelableSource.cancel in value;\r\n    }\r\n}\r\n\r\nexport class CancelError extends Error {\r\n    constructor(message?: string) {\r\n        super(message || \"Operation was canceled\");\r\n    }\r\n}\r\n\r\nObject.defineProperty(CancelError.prototype, \"name\", {\r\n    enumerable: false,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"CancelError\",\r\n});\r\n\r\ndeprecateProperty(Cancelable, 'isCancelable', \"Use 'Cancelable.hasInstance' instead.\");\r\ndeprecateProperty(CancelableSource, 'isCancelable', \"Use 'Cancelable.hasInstance' instead.\");\r\ndeprecateProperty(CancelableSource, 'isCancelableSource', \"Use 'CancelableSource.hasInstance' instead.\");"]}