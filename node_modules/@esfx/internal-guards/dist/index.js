"use strict";
/*!
   Copyright 2019 Ron Buckton

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPrimitive = exports.isPropertyKey = exports.isString = exports.isBoolean = exports.isNumber = exports.isIterator = exports.isAsyncIterable = exports.isIterable = exports.isDefined = exports.isMissing = exports.isInstance = exports.isObject = exports.isFunctionOrUndefined = exports.isFunction = void 0;
/*@internal*/
function isFunction(value) {
    return typeof value === "function";
}
exports.isFunction = isFunction;
/*@internal*/
function isFunctionOrUndefined(value) {
    return typeof value === "function" || value === undefined;
}
exports.isFunctionOrUndefined = isFunctionOrUndefined;
/*@internal*/
function isObject(value) {
    return typeof value === "object" && value !== null
        || typeof value === "function";
}
exports.isObject = isObject;
/*@internal*/
function isInstance(value, ctor) {
    return !isMissing(value) && value instanceof ctor;
}
exports.isInstance = isInstance;
/*@internal*/
function isMissing(value) {
    return value === null
        || value === undefined;
}
exports.isMissing = isMissing;
/*@internal*/
function isDefined(value) {
    return value !== null && value !== undefined;
}
exports.isDefined = isDefined;
/*@internal*/
function isIterable(value) {
    return value !== undefined
        && value !== null
        && Symbol.iterator in Object(value);
}
exports.isIterable = isIterable;
/*@internal*/
function isAsyncIterable(value) {
    return value !== undefined
        && value !== null
        && Symbol.asyncIterator in Object(value);
}
exports.isAsyncIterable = isAsyncIterable;
/** @internal */
function isIterator(value) {
    return isObject(value)
        && isFunction(value.next)
        && isFunctionOrUndefined(value.throw)
        && isFunctionOrUndefined(value.return)
        && isFunctionOrUndefined(value[Symbol.iterator]);
}
exports.isIterator = isIterator;
/*@internal*/
function isNumber(value) {
    return typeof value === "number";
}
exports.isNumber = isNumber;
/*@internal*/
function isBoolean(value) {
    return typeof value === "boolean";
}
exports.isBoolean = isBoolean;
/*@internal*/
function isString(value) {
    return typeof value === "string";
}
exports.isString = isString;
/*@internal*/
function isPropertyKey(value) {
    return typeof value === "string"
        || typeof value === "symbol"
        || typeof value === "number";
}
exports.isPropertyKey = isPropertyKey;
/*@internal*/
function isPrimitive(value) {
    return typeof value !== "function"
        && (typeof value !== "object" || value === null);
}
exports.isPrimitive = isPrimitive;
//# sourceMappingURL=index.js.map