{"version":3,"file":"test.js","sourceRoot":"","sources":["../src/test.ts"],"names":[],"mappings":"","sourcesContent":["import type { IsAny, IsNever } from \".\";\r\n\r\n/**\r\n * A helper type for testing types, used in conjunction with {@link ExpectType}:\r\n *\r\n * ```ts\r\n * // test suite:\r\n * type _ = [\r\n *  Test<ExpectType<Actual, Expected>>,\r\n * ];\r\n * ```\r\n */\r\nexport type Test<T extends { pass: true }> = T;\r\n\r\n/**\r\n * A helper type for testing types, used in conjunction with {@link Test}:\r\n *\r\n * ```ts\r\n * // test suite:\r\n * type _ = [\r\n *  Test<ExpectType<Actual, Expected>>\r\n * ];\r\n * ```\r\n */\r\n export type ExpectType<Actual, Expected> =\r\n    [IsNever<Expected>] extends [true] ? [IsNever<Actual>] extends [true] ? { pass: true } : { pass: false, Expected: Expected, Actual: Actual } :\r\n    [IsNever<Actual>] extends [true] ? { pass: false, Expected: Expected, Actual: Actual } :\r\n    [IsAny<Expected>] extends [true] ? [IsAny<Actual>] extends [true] ? { pass: true } : { pass: false, Expected: Expected, Actual: Actual } :\r\n    [IsAny<Actual>] extends [true] ? { pass: false, Expected: Expected, Actual: Actual } :\r\n    [Expected, Actual] extends [Actual, Expected] ? { pass: true } :\r\n    { pass: false, Expected: Expected, Actual: Actual };\r\n"]}